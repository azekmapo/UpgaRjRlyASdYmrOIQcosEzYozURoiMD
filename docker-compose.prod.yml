services:
  # Main Nginx Gateway - Production Single Entry Point
  nginx:
    image: nginx:1.29-alpine
    restart: always
    ports:
      - "80:80"
      # - "443:443"  # Uncomment for SSL/HTTPS
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro  # Uncomment for SSL certificates
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
      - notifications-server
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 17 Database
  postgres:
    image: postgres:17-alpine
    env_file:
      - ./postgres/.env
    restart: always
    # DO NOT expose ports in production - only internal access
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laravel -d gestion_pfe"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Laravel Backend (nginx + PHP-FPM)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # DO NOT expose ports - nginx gateway handles routing
    expose:
      - "80"
    volumes:
      # Production: don't mount source code, only persistent data
      - backend_storage:/var/www/html/storage
      # Mount .env file for Laravel configuration
      - ./backend/.env:/var/www/html/.env:ro
    networks:
      - app-network
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_BASE_URL: http://localhost
        VITE_SOCKET_URL: http://localhost
    env_file:
      - ./frontend/.env
    restart: always
    # DO NOT expose ports - nginx handles routing
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Notifications Server
  notifications-server:
    build:
      context: ./notifications-server
      dockerfile: Dockerfile
      target: production
    env_file:
      - ./notifications-server/.env
    restart: always
    # DO NOT expose ports - nginx handles routing
    expose:
      - "3001"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    env_file:
      - ./redis/.env
    restart: always
    # DO NOT expose ports in production - only internal access
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      sh -c "redis-server --requirepass $$REDIS_PASSWORD --appendonly yes --save 60 1000"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  nginx_cache:
    driver: local

networks:
  app-network:
    driver: bridge
