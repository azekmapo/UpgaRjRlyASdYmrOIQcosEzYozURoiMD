services:
  # Main Nginx Gateway - Single Entry Point
  nginx:
    image: nginx:1.29-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
    depends_on:
      - backend
      - frontend
      - notifications-server
    networks:
      - app-network

  # PostgreSQL 17 Database
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    env_file:
      - ./postgres/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laravel -d gestion_pfe"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Laravel Backend (nginx + PHP-FPM)
  backend:
    build:
      context: ./backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    expose:
      - "80"
    volumes:
      # Don't mount the entire backend folder - causes vendor to be overwritten
      - ./backend/app:/var/www/html/app
      - ./backend/config:/var/www/html/config
      - ./backend/database:/var/www/html/database
      - ./backend/routes:/var/www/html/routes
      - ./backend/resources:/var/www/html/resources
      - ./backend/public:/var/www/html/public
      - backend_storage:/var/www/html/storage
      - backend_vendor:/var/www/html/vendor
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      target: development
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    expose:
      - "5173"
    networks:
      - app-network
    depends_on:
      - backend

  notifications-server:
    build:
      context: ./notifications-server
      target: development
    env_file:
      - ./notifications-server/.env
    expose:
      - "3001"
    volumes:
      - ./notifications-server:/app
      - /app/node_modules
    networks:
      - app-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    env_file:
      - ./redis/.env
    command: sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  backend_storage:
    driver: local
  backend_vendor:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
